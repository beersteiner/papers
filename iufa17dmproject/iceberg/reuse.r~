## FUNCTION DEFINITIONS

## This is a function so it can be invoked easily from interactive R session
connectdb <- function() {
    ## Connect to database
    db <- dbConnect(MySQL(), user='john', password='', host='127.0.0.1')
    dbSendQuery(db, 'USE iceberg')
    return(db)
}

## Same here
disconnectdb <- function(db) {
    suppressWarnings(dbDisconnect(db))
}


## Wrapper function for paste for compactness
p <- function(...) {
    return(paste(..., sep=''))
}

## This will get a json key value given the table, key name, and condition
getJAtr <- function(tbl, key, cond) {
    qry <- p('SELECT img->"$.',key,'" FROM ', tbl, ' WHERE ', cond)
    ## Issues with connection object corruption, so need to catch
    ##   errors and press on
    res <- tryCatch(suppressWarnings(dbGetQuery(mydb, qry)[,1]),
                    error = function(e) {
                        warning(call.=FALSE,
                                expr=p('mydb reestablished at getJAtr(',
                                       tbl,',',key,',',cond,')'))
                        disconnectdb(mydb)
                        assign('mydb', connectdb(), .GlobalEnv)
                        return(suppressWarnings(dbGetQuery(mydb, qry)[,1]))
                    })
    ## Extract json object from resulting string
    for(i in 1:length(res)) {
        tmp <- fromJSON(res[1]) ## if a vector was returned, it is an img
        if(length(tmp) > 1) return(tmp)
        res[i] <- fromJSON(res[i]) ## otherwise replace result with json object
    }
    return(res)
}

## This will return one of the json images in matrix form
getJImg <- function(tbl, bnd, idn) {
    #print(p(tbl,'/',bnd,'/',idn))
    res <- getJAtr(tbl, p('band_',bnd), p('idn=',idn))
    #print('success')
    return(matrix(res, ncol=75, byrow=TRUE))
}

## This will return inc_angle and handle NAs
getJinc_angle <- function(tbl, idn) {
    return((function(x) if(!(x %in% c('na'))) return(as.numeric(x)) else return(NA))
    (getJAtr(tbl,'inc_angle', p('idn=',idn))))
}
    

## Apply convolution to an image given a 3x3 kernel k
kern <- function(img, k) {
    res <- img
    img <- cbind(img[,1], img, img[,ncol(img)])
    img <- rbind(img[1,], img, img[nrow(img),])
    for(i in 1:nrow(res)) {
        for(j in 1:ncol(res)) {
            res[i,j] = sum(k * img[i:(i+2),j:(j+2)])
        }
    }
    return(res)
}

## Return  mini-matrix around zoom point
zoom <- function(img, pos, rad) {
    rrng <- max(pos[[1]][1]-rad, 1):min(pos[[1]][1]+rad, 75)
    crng <- max(pos[[1]][2]-rad, 1):min(pos[[1]][2]+rad, 75)
    return(img[rrng,crng])
}

## Find the center of object
findCenter <- function(img) {
    res <- list(c(NA,NA))
    rad <- 3
    mx <- -Inf
    for(r in (1+rad):(75-rad)) {
        for(c in (1+rad):(75-rad)) {
            tmp <- sum(zoom(img, list(c(r,c)), rad))
            if(tmp > mx) {
                mx <- tmp
                res <- list(c(r,c))
            }
        }
    }
    return(res)
}


## This will get the features from idn that are used in the LR
getFeat <- function(tbl, idn) {
    ## Get image and other items needed to calculate features
    b1 <- getJImg(tbl, 1, idn)
    b1.max.position <- findCenter(b1)
    b1.tar <- zoom(b1, b1.max.position, 3)
    b2 <- getJImg(tbl, 2, idn)
    b2.tar <- zoom(b2, b1.max.position, 3)
    
    ## Now calculate imagefeatures
    res <-  data.frame(is_iceberg = NA)
    res$band.1.max.position <- b1.max.position
    res$band.1.mean <- mean(b1)
    res$band.2.mean <- mean(b2)
    res$band.1.var <- var(as.vector(b1))
    res$band.2.var <- var(as.vector(b2))
    res$band.1.max <- max(b1)
    res$band.2.max <- max(b2)
    res$band.1.tar.mean <- mean(b1.tar)
    res$band.2.tar.mean <- mean(b2.tar)
    res$band.1.tar.ghs.mean <- mean(kern(b1.tar, k.gradh)^2)
    res$band.2.tar.ghs.mean <- mean(kern(b2.tar, k.gradh)^2)
    res$band.1.tar.gvs.mean <- mean(kern(b1.tar, k.gradv)^2)
    res$band.2.tar.gvs.mean <- mean(kern(b2.tar, k.gradv)^2)
    res$band.1.tb.mean.dif <- res$band.1.tar.mean - mean(b1[brdmask])
    res$band.2.tb.mean.dif <- res$band.2.tar.mean - mean(b2[brdmask])
    res$tar.mean.dif <- res$band.1.tar.mean - res$band.2.tar.mean
    res$tar.ghs.dif <- res$band.1.tar.ghs.mean - res$band.2.tar.ghs.mean
    res$tar.gvs.dif <- res$band.1.tar.gvs.mean - res$band.2.tar.gvs.mean
    res$tb.mean.dif.dif <- res$band.1.tb.mean.dif - res$band.2.tb.mean.dif
    ## Other Features
    res$inc_angle <- getJinc_angle(tbl,idn)
    ## tmp <- getJAtr('train','inc_angle', p('idn=',r))
    ## if(!(tmp %in% c('na'))) {
    ##     res$inc_angle <- as.numeric(tmp)
    ## } else { res$inc_angle <- NA }
    ## res$inc_angle <-
    ##         (function(x) if(!(x %in% c('na'))) return(as.numeric(x)) else return(NA))(getJAtr('train','inc_angle', p('idn=',r)))
    if(tbl=='train') {
        res$is_iceberg <- as.numeric(getJAtr(tbl, 'is_iceberg', p('idn=', idn)))
    } else {
        res$is_iceberg <- NA
    }

    ## Return features
    return(res)
}



## GLOBAL VARIABLES




## This mask can be used to extract the border contents of an image
brdmask <- matrix(
(function (x) 1:(75*75)<=x*75 |
              1:(75*75)>(75-x)*75 |
              1:(75*75)%%75<=x |
              1:(75*75)%%75>(75-x))
(10)  # The width of the border
,75)

## Kernels
k.smooth <- matrix(rep(1/9, 9), 3, byrow=TRUE)
k.sharp <- matrix(c(0, -1, 0, -1, 5, -1, 0, -1, 0), 3, byrow=TRUE)
k.edgh <- matrix(c(0, 0, 0, -1, 2, -1, 0, 0, 0), 3, byrow=TRUE)
k.edgv <- matrix(c(0, -1, 0, 0, 2, 0, 0, -1, 0), 3, byrow=TRUE)
k.gradh <- matrix(rep(c(-1, 0, 1), 3), 3, byrow=TRUE)
k.gradv <- matrix(rep(c(-1, 0, 1), 3), 3, byrow=FALSE)

